{"version":3,"file":"static/js/63.bf1dd805.chunk.js","mappings":"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","sources":["webpack://reactlesson2024/./src/Components/Profile/ProfileInfo/ProfileInfo.module.css?23b5","webpack://reactlesson2024/./src/Components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css?3d5a","Components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.js","Components/Profile/ProfileInfo/ProfileInfo.js","webpack://reactlesson2024/./src/Components/Profile/Posts/Posts.module.css?dbb2","webpack://reactlesson2024/./src/Components/Profile/Posts/NewPostBlock/NewPostBlock.module.css?fb80","Components/Profile/Posts/NewPostBlock/NewPostBlock.js","Components/Profile/Posts/Posts.js","Components/Profile/Posts/PostsContainer.js","Components/Profile/Profile.js","Components/Profile/ProfileContainer.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileBackground\":\"ProfileInfo_profileBackground__MuOzs\",\"profile\":\"ProfileInfo_profile__qW4dl\",\"profileImg\":\"ProfileInfo_profileImg__Zyxme\",\"profileData\":\"ProfileInfo_profileData__2lRSU\"};","// extracted by mini-css-extract-plugin\nexport default {\"statusWrapper\":\"ProfileStatus_statusWrapper__jLzZw\"};","import React, { useState } from 'react';\r\nimport css from './ProfileStatus.module.css';\r\n\r\n// class ProfileStatus extends React.Component {\r\n//     state = {\r\n//         editMode: false,\r\n//         status: this.props.status\r\n//     }\r\n    \r\n//     activateEditMode = () => {\r\n//         this.setState({\r\n//             editMode: true\r\n//         })\r\n//     }\r\n\r\n//     deactivateEditMode = () => {\r\n//         this.setState({\r\n//             editMode: false\r\n//         })\r\n//         this.props.updateUserStatusTC(this.state.status);\r\n//     }\r\n\r\n//     changeStatus = (e) => {\r\n//         this.setState({\r\n//             status: e.target.value\r\n//         })\r\n//     }\r\n\r\n//     componentDidUpdate(prevProps, prevState){ \r\n//         if(prevProps.status !== this.props.status) {\r\n//             this.setState({\r\n//                 status: this.props.status\r\n//             })\r\n//         }\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <div className={css.statusWrapper}>\r\n//                 {this.state.editMode ? \r\n//                 <input autoFocus={true} onBlur={this.deactivateEditMode} onChange={this.changeStatus} value={ this.state.status } /> :\r\n//                 <p onClick={this.activateEditMode}>{this.props.status || 'No status'}</p>}\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\nconst ProfileStatus = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    let activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    let deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateUserStatusTC(status);\r\n    }\r\n\r\n    let changeStatus = (e) => {\r\n        setStatus(e.target.value);\r\n    } \r\n\r\n    return (\r\n        <div className={css.statusWrapper}>\r\n                 {editMode ? \r\n                 <input autoFocus={true} onBlur={deactivateEditMode} onChange={changeStatus} value={ status } /> :\r\n                 <p onClick={activateEditMode}>{status || 'No status'}</p>}\r\n             </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport css from './ProfileInfo.module.css';\r\nimport backgroundImg from './../../../Materials/contentImg.jpg';\r\nimport Preloader from '../../Common/Preloader/Preloader';\r\nimport ProfileStatus from './ProfileStatus/ProfileStatus';\r\n\r\nconst ProfileInfo = (props) => {\r\n  if(!props.profile) {\r\n    return <Preloader />\r\n  }\r\n  return (\r\n        <>\r\n        <div className={css.profileBackground}>\r\n            <img src={backgroundImg} alt=\"\"/>\r\n          </div>\r\n\r\n          <div className={css.profile}>\r\n            <div className={css.profileImg}>\r\n              <img src={props.profile.photos.large} alt=\"\"/>\r\n            </div>\r\n\r\n            <div className={css.profileData}>\r\n                <h2>{props.profile.fullName}</h2>\r\n\r\n                <ProfileStatus status={props.status} updateUserStatusTC={props.updateUserStatusTC} />\r\n                <p>{`Looking for a job?: ${props.profile.lookingForAJob ? 'Yes' : 'No'}`}</p>\r\n                <p>{`Description: ${props.profile.lookingForAJobDescription}`}</p>\r\n                <p>{`About me: ${props.profile.aboutMe}`}</p>\r\n                <p>{`Github: ${props.profile.contacts.github}`}</p>\r\n                <p>{`Instagram: ${props.profile.contacts.instagram}`}</p>\r\n              </div>\r\n           </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"Posts_postBlock__Zy8f4\",\"postBlockImg\":\"Posts_postBlockImg__frmd9\",\"postText\":\"Posts_postText__7bYG4\"};","// extracted by mini-css-extract-plugin\nexport default {\"newPostBlock\":\"NewPostBlock_newPostBlock__1TKQf\",\"formWrapper\":\"NewPostBlock_formWrapper__qQFBy\",\"inputWrapper\":\"NewPostBlock_inputWrapper__UDBbc\"};","import React from 'react';\r\nimport css from './NewPostBlock.module.css';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLength, required } from '../../../Common/Validators/Validators';\r\nimport { Input } from '../../../Common/FormsControl/FormsControl';\r\n\r\nlet maxLength10 = maxLength(10);\r\n\r\nlet PostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit} className={css.inputWrapper}>\r\n      <div>\r\n        <Field component={Input} name='postInput' placeholder='your news...' validate={[required, maxLength10]} />\r\n      </div>\r\n    <button>Send</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nlet ReduxPostForm = reduxForm({\r\n  form: 'postForm'\r\n})(PostForm);\r\n\r\nconst NewPostBlock = (props) => {\r\n  \r\n  let addPost = (formData) => {\r\n    props.addPost(formData.postInput);\r\n  }\r\n\r\n    return (\r\n        <div className={css.newPostBlock}>\r\n            <p>My posts</p>\r\n            <div className={css.formWrapper}>\r\n              <ReduxPostForm onSubmit={addPost}/>\r\n            </div>\r\n          </div>\r\n    );\r\n}\r\n\r\nexport default NewPostBlock;","import React from 'react';\r\nimport css from './Posts.module.css';\r\nimport NewPostBlock from './NewPostBlock/NewPostBlock';\r\nimport postImg from './../../../Materials/postImg.png';\r\n\r\nconst Posts = ((props) => {\r\n    console.log('render');\r\n    return (\r\n        <div>\r\n            <NewPostBlock addPost={props.addPost} />\r\n            \r\n            <div className={css.postsBlock}>\r\n                {props.postMessages.map( item => \r\n                    <div key={item.id} className={css.postBlock}>\r\n                    <div className={css.postBlockImg}>\r\n                        <img src={postImg} alt=\"\"/>\r\n                    </div>\r\n        \r\n                    <div className={css.postText}><p>{item.textPost}</p></div>\r\n                </div> )}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Posts;","// import React from 'react';\r\nimport Posts from './Posts';\r\nimport { addPostAC } from '../../../Redux/Reducers/profileReducer';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    postMessages: state.profilePage.postMessages\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (inputText) => { dispatch( addPostAC(inputText) ) }\r\n  }\r\n}\r\n\r\nlet PostsContainer = connect(mapStateToProps, mapDispatchToProps)(Posts);\r\n\r\n\r\nexport default PostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport PostsContainer from './Posts/PostsContainer';\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n          <ProfileInfo profile={props.profile} status={props.status} updateUserStatusTC={props.updateUserStatusTC} />\r\n          <PostsContainer />\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile.js';\r\nimport { connect } from 'react-redux';\r\nimport { getProfileTC, getUserStatusTC, updateUserStatusTC } from './../../Redux/Reducers/profileReducer.js';\r\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\r\nimport { withAuthRedirect } from './../Common/HOC/withAuthRedirect.js';\r\nimport { compose } from 'redux';\r\n\r\nfunction withRouter(Component) {\r\n  function ComponentWithRouterProp(props) {\r\n      let location = useLocation();\r\n      let navigate = useNavigate();\r\n      let params = useParams();\r\n\r\n      // useEffect(() => {\r\n      //   debugger\r\n      //   if (!props.isAuth) {\r\n      //     navigate(\"/login\");\r\n      //   }\r\n      // }, [props.isAuth, navigate]);\r\n\r\n      return (\r\n          <Component\r\n              {...props}\r\n              router={{ location, navigate, params }}\r\n          />\r\n      );\r\n  }\r\n  \r\n  return ComponentWithRouterProp;\r\n}\r\n\r\nclass ProfileContainer extends React.Component {\r\n  componentDidMount() {\r\n    let userId = this.props.router.params.userId;\r\n    if(!userId){\r\n      userId = this.props.authorizedUserId;\r\n      // if(!userId){\r\n      //   debugger\r\n      //   this.props.history.push('/dialogs')\r\n      // }\r\n    }\r\n    this.props.getProfileTC(userId);\r\n    this.props.getUserStatusTC(userId);\r\n  }\r\n  \r\n  render() {\r\n      return <Profile profile={this.props.profile} status={this.props.status} updateUserStatusTC={this.props.updateUserStatusTC} /> \r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getProfileTC, getUserStatusTC, updateUserStatusTC }),\r\n  withRouter,\r\n  withAuthRedirect,\r\n)(ProfileContainer);\r\n\r\n// let withAuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n\r\n\r\n// export default connect(mapStateToProps, { getProfileTC })(withRouter(withAuthRedirectComponent));"],"names":["props","editMode","setEditMode","useState","status","setStatus","_jsx","className","css","children","autoFocus","onBlur","deactivateEditMode","updateUserStatusTC","onChange","e","target","value","onClick","activateEditMode","profile","_jsxs","_Fragment","src","backgroundImg","alt","photos","large","fullName","ProfileStatus","concat","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","github","instagram","Preloader","maxLength10","maxLength","ReduxPostForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Input","name","placeholder","validate","required","formData","addPost","postInput","console","log","NewPostBlock","postsBlock","postMessages","map","item","postBlock","postBlockImg","postImg","postText","textPost","id","connect","state","profilePage","dispatch","inputText","addPostAC","Posts","ProfileInfo","PostsContainer","ProfileContainer","React","componentDidMount","userId","this","router","params","authorizedUserId","getProfileTC","getUserStatusTC","render","Profile","compose","auth","isAuth","Component","location","useLocation","navigate","useNavigate","useParams","withAuthRedirect"],"sourceRoot":""}